#!/usr/bin/env node
// Generated by LiveScript 1.3.1
var fs, fsExtra, path, yargs, nodeSass, cleanCss, scssSymbolsParser, argv, vardir, files, outdir, twbsRoots, twbsRoot, originVarfile, varfile, variables;
fs = require('fs');
fsExtra = require('fs-extra');
path = require('path');
yargs = require('yargs');
nodeSass = require('node-sass');
cleanCss = require('clean-css');
scssSymbolsParser = require('scss-symbols-parser');
argv = yargs.option('config', {
  alias: 'c',
  description: "dir for custom _variables.scss",
  type: 'string'
}).option('output', {
  alias: 'o',
  description: "output directory. default dist, if omitted.",
  type: 'string'
}).help('help').alias('help', 'h').check(function(argv, options){
  if (!argv.c || !fs.existsSync(argv.c)) {
    throw new Error("config file directory missing.");
  }
  return true;
}).argv;
vardir = argv.c;
files = ['bootstrap.scss', 'bootstrap-grid.scss', 'bootstrap-reboot.scss'];
outdir = argv.o != null ? argv.o : 'dist';
twbsRoots = ["node_modules/bootstrap", path.join(__dirname, "..", "node_modules/bootstrap")];
twbsRoot = twbsRoots.map(function(p){
  var f1, f2;
  f1 = fs.existsSync(path.join(p, "scss/_variables.scss"));
  f2 = fs.existsSync(path.join(p, "scss/_variables.scss.original"));
  return [p, f1, f2];
}).filter(function(b){
  return b[1] || b[2];
})[0];
if (!twbsRoot) {
  console.log("can't locate bootstrap module folder. did you install bootstrap?");
  process.exit(-1);
}
twbsRoot = twbsRoot[0];
originVarfile = path.join(twbsRoot, "scss/_variables.scss");
console.log("found bootstrap in " + twbsRoot + ". ");
varfile = path.join(vardir, "_variables.scss");
fsExtra.ensureDirSync(path.join(outdir, 'css'));
fsExtra.ensureDirSync(vardir);
if (!fs.existsSync(varfile)) {
  fsExtra.copySync(originVarfile, varfile);
}
files.map(function(fn){
  var code, codeMin;
  console.log("build " + fn + " ...");
  code = "@import \"" + varfile + "\";\n@import \"" + path.join(twbsRoot, 'scss', fn) + "\";";
  code = nodeSass.renderSync({
    data: code,
    includePaths: ['.', path.join(twbsRoot, 'scss')],
    outputStyle: 'expanded',
    sourceMap: true,
    sourceMapContents: true,
    precision: 6
  });
  codeMin = new cleanCss({
    level: 1,
    format: {
      breakWith: 'lf'
    },
    sourceMap: true,
    sourceMapInlineSources: true
  }).minify(code.css);
  fs.writeFileSync(path.join(outdir, 'css', fn.replace('scss', 'css')), code.css);
  return fs.writeFileSync(path.join(outdir, 'css', fn.replace('scss', 'min.css')), codeMin.styles);
});
console.log("generating json for variables ...");
variables = (scssSymbolsParser.parseSymbols(fs.readFileSync(originVarfile).toString()).variables.concat(scssSymbolsParser.parseSymbols(fs.readFileSync(varfile).toString()).variables)).map(function(it){
  return {
    name: it.name,
    value: it.value
  };
});
fs.writeFileSync(path.join(outdir, 'css', "variables.json"), JSON.stringify(variables));
